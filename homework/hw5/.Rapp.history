cav = cav[!is.na(cav$pdiag),]
head(cav)
statetable.msm(state, PTNUM, data=cav)
twoway4.q = rbind(c(0, 0.25, 0, 0.25), c(0.166, 0, 0.166, 0.166), c(0, 0.25, 0, 0.25), c(0, 0, 0, 0))
rownames(twoway4.q) = colnames(twoway4.q) = c("Well", "Mild", "Severe", "Death")
twoway4.q
cav.msm = msm(state ~ years, subject=PTNUM, data=cav, qmatrix=twoway4.q, death=4)
cav.msm
pmatrix.msm(cav.msm, t=1, ci="normal")
ihd = as.numeric(cav[, "pdiag"] == "IHD")
cav.cov.msm = msm(state ~ years, subject=PTNUM, data=cav, covariates = ~ dage + ihd, qmatrix = twoway4.q, death=4, method="BFGS", control=list(fnscale=4000, maxit=10000))
hazard.msm(cav.cov.msm)
coef.msm(cav.cov.msm)
lrtest.msm(cav.msm, cav.cov.msm)
plot.msm(cav.cov.msm)
data("fev")
head(fev)
install.packages("e1071")
x = array(data=c(0,0,1,1,0,1,0,1), dim=c(4,2))
y = factor(c(1,-1,-1,1))
model = svm(x, y, type="C-classification")
library(e1071)
model = svm(x, y, type="C-classification")
predict(model, x)
install.packages("RWeka")
install.packages("verification")
install.packages("ROCR")
library(Hmisc)
install.packages("Hmisc")
library(DMwR)
data(iris)
data = iris[, c(1,2,5)]
data$Species = factor(ifelse(data$Species)=="setosa", "rare", "common")
data$Species = factor(ifelse(data$Species=="setosa", "rare", "common"))
iris.smote = SMOTE(Species ~ ., data, perc.over=600)
table(iris.smote$Species)
classTree = SMOTE(Species ~., data, perc.over=600, learner="rpartXse", se=0.5)
classTree
install.packages("randomForest")
x = seq(-2, -4, by=0.01)
x = seq(-4, -2, by=0.01)
f = function(x){ y=(x^2 - 9)/(x+3); return(y)}
y = f(x)
plot(x, y)
plot(x, y, type='l')
install.packages('nnet')
install.packages('kernlab')
install.packages('earth')
install.packages('~/Dropbox/CRISP/package/package0.2.2/CRISP_0.2.2.tar.gz', repos = NULL, type="source")
library(CRISP)
install.package('maptools')
install.packages(c('maptools', 'pscl', 'corpcor', 'cshapes', 'shape'))
install.packages('~/Dropbox/CRISP/package/package0.2.2/CRISP_0.2.2.tar.gz', repos = NULL, type="source")
library(CRISP)
data(crisp.data)
data(predict.data)
data(cutoffs)
crisp.data$X64...ZF....l1cut <- ifelse(crisp.data$X64...ZF....l1>=500,500,crisp.data$X64...ZF....l1)#
crisp.data$fdipc.l1 <- crisp.data$BX.KLT.DINV.CD.WD.l1/crisp.data$SP.POP.TOTL.l1#
crisp.data$fdipc.l1cut <- ifelse(crisp.data$fdipc.l1>=10000,10000,crisp.data$fdipc.l1)#
crisp.data$fdi_gdp.l1 <- crisp.data$BX.KLT.DINV.CD.WD.l1/crisp.data$NY.GDP.MKTP.KD.l1#
crisp.data$iraq <- ifelse(crisp.data$ccode==645,1,0)#
crisp.data$afg <- ifelse(crisp.data$ccode==700,1,0)#
crisp.data$fdi.l1 <- crisp.data$BX.KLT.DINV.CD.WD.l1#
predict.data$X64...ZF....l1cut <- ifelse(predict.data$X64...ZF....l1>=500,500,predict.data$X64...ZF....l1)#
predict.data$fdipc.l1 <- predict.data$BX.KLT.DINV.CD.WD.l1/predict.data$SP.POP.TOTL.l1#
predict.data$fdipc.l1cut <- ifelse(predict.data$fdipc.l1>=10000,10000,predict.data$fdipc.l1)#
predict.data$fdi_gdp.l1 <- predict.data$BX.KLT.DINV.CD.WD.l1/predict.data$NY.GDP.MKTP.KD.l1#
predict.data$iraq <- ifelse(predict.data$ccode==645,1,0)#
predict.data$afg <- ifelse(predict.data$ccode==700,1,0)
training <- crisp.data[crisp.data$date <= cutoffs$trainingend,]#
test <- crisp.data[crisp.data$date >= cutoffs$teststart,]
MSE <- function(model, data){#
  y <- names(model$model)[1]#
  pred <- predict(model, newdata=data)#
  diff <- (data[, y] - pred)^2#
  output <- sum(diff)/length(diff)#
  print(output)#
}
model.ins <- zeroinfl(#
  ins.h.count.both ~ 1 + W.centdist.std.rebellion.l1 + eth.rel.h.count.l1 |  1 + #
  ins.h.count.both.l1 + log(NY.GDP.PCAP.KD.l1), #
  dist='negbin', link='logit', data=training)#
#
summary(model.ins)#
MSE(model.ins, training) # 94.8#
MSE(model.ins, test) # 0.37
par(mfrow=c(1,2))
plot.countfit(model.ins, training, title="In-Sample Insurgency Model")
plot.countfit(model.ins, test, title="Out-of-Sample Insurgency Model")
dev.off()
check <- function(model){#
	print(summary(model))#
	print(MSE(model, training))#
	print(MSE(model, test))#
#
	par(mfrow=c(1,2))#
	plot.countfit(model, training, title="In-Sample Insurgency Model")#
	plot.countfit(model, test, title="Out-of-Sample Insurgency Model")#
}
model.mcd <- zeroinfl(#
  ins.h.count.both ~ 1 + W.centdist.std.rebellion.l1 + eth.rel.h.count.l1 +#
  State.Dept. +  fdi.l1 + exclpop + ProxElection |  1 + #
  ins.h.count.both.l1 + log(NY.GDP.PCAP.KD.l1), #
  dist='negbin', link='logit', data=training)#
#
summary(model.mcd)#
MSE(model.ins, training) # 4.33#
MSE(model.ins, test) # 0.326
ls()
head(crisp.data)
install.packages('~/Dropbox/wicews/packages/package/SERIFpackage/package0.7.2/wicews_0.7.2.tar.gz', repos = NULL, type="source")
install.packages('~/Dropbox/wicews/package/SERIFpackage/package0.7.2/wicews_0.7.2.tar.gz', repos = NULL, type="source")
library(wicews)
data(wicews.data)
data(wicews)
data(icews)
head(icews)
install.packages('expm')
set.seed(123)
tmat = matrix(rnorm(16)^2, ncol=4)
tmat = tmat/rowSums(tmat)
tmat
require(expm)
matplot(t(sapply(1:20, function(x) matrix(c(1,0,0,0), ncol=4), %*% (tmat(%^% x)))))
matplot( t(sapply(1:20, function(x) matrix(c(1,0,0,0), ncol=4) %*% (tmat %^% x) ) ) )
install.packages('bigmemory')
install.packages('biganalytics')
install.packages('biglm')
library(bigmemory)
library(biganalytics)
?read.big.matrix
install.packages('biglm')
install.packages('bigtabulate')
egy = read.csv('~/dropbox/gdelt-egypt-turkey/carto-data/both-egypt-clean-20130725.csv')
dim(egy)
head(egy)
library(doBy)
egysum = summaryBy(igdelt + iicews ~ SenderActor + Latitude + Longitude + Source )
egysum = summaryBy(igdelt + iicews ~ SenderActor + Latitude + Longitude + Source, data=egy)
dim(egysum)
head(egysum)
egysum = summaryBy(igdelt + iicews ~ SenderActor + Latitude + Longitude + Source, data=egy, FUN=sum)
head(egysum)
colnames(egysum)[5] = 'gdeltsum'
head(egysum)
colnames(egysum)[6] = 'icewssum'
head(egysum)
egy2 = merge(egy, egysum, by=c('SenderActor', 'Latitude', 'Longitude', 'Source'), all.x=TRUE)
dim(egy2)
head(egy2)
tail(egy2)
egy2$maxsum = ifelse(egy2$gdeltsum>=egy2$icewssum, egy2$gdeltsum, egy2$icewssum)
summary(egy2$maxsum)
write.csv(egy2, file='~/dropbox/gdelt-egypt-turky/carto-data/both-egypt-clean-sum-20130725.csv')
write.csv(egy2, file='~/dropbox/gdelt-egypt-turkey/carto-data/both-egypt-clean-sum-20130725.csv')
write.csv(egy2, file='~/dropbox/gdelt-egypt-turkey/carto-data/both-egypt-clean-sum-20130725.csv', row.names=FALSE)
log(1, 2)
log(2, 1)
setwd('~/github/cs571/homework/hw5')#
require(utils)#
require(stringr)
STRING = 'AAAAGTAAAAGT';
STRING_LENGTH = nchar(STRING);
STRING = 'AAAAGTAAAAGT'
STRING = "AAAAGTAAAAGT"
STRING = "AAAAGTAAAAGT"
STRING_LENGTH = nchar(STRING);
STRING_LENGTH = nchar(STRING);
string = "AAAGTAAAGT"
string_length = nchar(string)
substring="AAA"
locations = seq(1, string_length-(substring_length-1), substring_length)
substring_length = nchar(substring)
locations = seq(1, string_length-(substring_length-1), substring_length)
locations
substrings = NULL
for(i in 1:substring_length){#
	substrings = rbind(substrings, substring(string, locations+i-1, locations+substring_length+i-2))#
}
substrings
match_locations = grep(substring, substrings)
number_matches = length(match_locations)
match_locations
number_atches
number_matches
substringOccurrences = function(string="AAAGTAAAGT", substring="AAA"){#
	string_length = nchar(string)#
	substring_length = nchar(substring)#
	locations = seq(1, string_length-(substring_length-1), substring_length)#
	substrings = NULL#
	for(i in 1:substring_length){#
		substrings = rbind(substrings, substring(string, locations+i-1, locations+substring_length+i-2))#
	}#
	match_locations = grep(substring, substrings)#
	number_matches = length(match_locations)#
	return(number_matches)#
}
substringOccurrences
substringOccurrences()
substringOccurrences(substring="AA")
train = read.table("training_data_gp.txt", as.is=TRUE, header=FALSE)#
dim(train)#
n = nrow(train)#
test = read.table("test_data_gp.txt", as.is=TRUE, header=FALSE)#
dim(test)#
names(train) = names(test) = c("sequence", "intensity")
combos1 = c("A", "C", "G", "T")#
substrings = expand.grid(first=combos1, second=combos1)#
combos2 = paste(substrings$first, substrings$second, sep="")#
substrings = expand.grid(first=letters, second=letters, third=letters)#
combos3 = paste(substrings$first, substrings$second, substrings$third, sep="")#
combos3#
combos = c(combos1, combos2, combos3)#
length(combos)
combos1 = c("A", "C", "G", "T")
substrings = expand.grid(first=combos1, second=combos1)
combos2 = paste(substrings$first, substrings$second, sep="")
substrings = expand.grid(first=combos1, second=combos1 third=combos1)
combos3 = paste(substrings$first, substrings$second, substrings$third, sep="")
substrings = expand.grid(first=combos1, second=combos1, third=combos1)
combos3 = paste(substrings$first, substrings$second, substrings$third, sep="")
combos3
combos = c(combos1, combos2, combos3)
length(combos)
combos1 = c("A", "C", "G", "T")#
substrings = expand.grid(first=combos1, second=combos1)#
combos2 = paste(substrings$first, substrings$second, sep="")#
substrings = expand.grid(first=combos1, second=combos1, third=combos1)#
combos3 = paste(substrings$first, substrings$second, substrings$third, sep="")#
combos3#
combos = c(combos1, combos2, combos3)#
length(combos)
substringOccurrences = function(string="AAAGTAAAGT", substring="AAA"){#
	string_length = nchar(string)#
	substring_length = nchar(substring)#
	locations = seq(1, string_length-(substring_length-1), substring_length)#
	substrings = NULL#
	for(i in 1:substring_length){#
		substrings = rbind(substrings, substring(string, locations+i-1, locations+substring_length+i-2))#
	}#
	match_locations = grep(substring, substrings)#
	number_matches = length(match_locations)#
	return(number_matches)#
}
allSubstringOccurrences = function(string){#
	s = 0 #
	for(combo in combos){#
		s = s + substringOccurrences(string=string, substring=combo)#
	}#
	return(s)#
}
substringCount = function(substring, string) { #
	count = 0 #
  i = 1 #
  n = nchar(string) #
  found = regexpr(substring, substr(string, i, n), perl=TRUE) #
  while (found > 0) { #
    count = count + 1 #
    i = i + found #
    found = regexpr(substring, substr(string, i, n), perl=TRUE) #
  } #
  return(count) #
}
allSubstringCounts = function(string){#
	s = 0 #
	for(combo in combos){#
		s = s + substringCount(combo, string)#
	}#
	return(s)#
}
stringKernel = function(x1, x2){#
	s = 0 #
	for(combo in combos){#
		phi = substringCount(combo, x1) * substringCount(combo, x2)#
		w = nchar(combo)/charsInCombos#
		s = s + (w*phi)#
	}#
	return(s)#
}
n=10#
gram = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
gram[1:10, 1:10]
charsInCombos = 4+(2*16)+(3*64)
n=10#
gram = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
gram[1:10, 1:10]
n=10#
gram = matrix(NA, nrow=n, ncol=n)#
start = proc.time()#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
end = proc.time()#
gram[1:10, 1:10]#
print(end-start)
stringKernel = function(x1, x2){#
	s = 0 #
	for(combo in combos){#
		phi = substringOccurrences(combo, x1) * substringOccurrences(combo, x2)#
		w = nchar(combo)/charsInCombos#
		s = s + (w*phi)#
	}#
	return(s)#
}
n=10#
gram = matrix(NA, nrow=n, ncol=n)#
start = proc.time()#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
end = proc.time()#
gram[1:10, 1:10]#
print(end-start)
substringOccurrences = function(string="AAAGTAAAGT", substring="AAA"){#
	string_length = nchar(string)#
	substring_length = nchar(substring)#
	locations = seq(1, string_length-(substring_length-1), substring_length)#
	substrings = NULL#
	for(i in 1:substring_length){#
		substrings = rbind(substrings, substring(string, locations+i-1, locations+substring_length+i-2))#
	}#
	match_locations = grep(substring, substrings)#
	number_matches = length(match_locations)#
	return(number_matches)#
}
stringKernel = function(x1, x2){#
	s = 0 #
	for(combo in combos){#
		phi = substringOccurrences(substring=combo, string=x1) * substringOccurrences(substring=combo, string=x2)#
		w = nchar(combo)/charsInCombos#
		s = s + (w*phi)#
	}#
	return(s)#
}
n=10#
gram = matrix(NA, nrow=n, ncol=n)#
start = proc.time()#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
end = proc.time()#
gram[1:10, 1:10]#
print(end-start)
stringKernel = function(x1, x2){#
	s = 0 #
	for(combo in combos){#
		phi = substringCounts(combo, x1) * substringCounts(combo, x2)#
		w = nchar(combo)/charsInCombos#
		s = s + (w*phi)#
	}#
	return(s)#
}
n=10#
gram = matrix(NA, nrow=n, ncol=n)#
start = proc.time()#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
end = proc.time()#
gram[1:10, 1:10]#
print(end-start)
stringKernel = function(x1, x2){#
	s = 0 #
	for(combo in combos){#
		phi = substringCount(combo, x1) * substringCount(combo, x2)#
		w = nchar(combo)/charsInCombos#
		s = s + (w*phi)#
	}#
	return(s)#
}
n=10#
gram = matrix(NA, nrow=n, ncol=n)#
start = proc.time()#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
end = proc.time()#
gram[1:10, 1:10]#
print(end-start)
n = nrow(train)#
gram = matrix(NA, nrow=n, ncol=n)#
start = proc.time()#
for(i in 1:n){#
	for(j in i:n){#
		gram[i,j] = gram[j,i] = stringKernel(train$sequence[i], train$sequence[j])#
	}#
	print(i)#
}#
#
save(gram, file="gram-new.rda")
rbf = function(x1, x2, sigma = 5){#
	# dist = (allSubstringCounts(x1) - allSubstringCounts(x2))^2#
	dist = stringKernel(x1, x2)#
	k = exp(-dist/(2*sigma^2))#
	return(k)#
}#
#
rbfFromStringCount = function(dist, sigma = 5){#
	# dist = (allSubstringCounts(x1) - allSubstringCounts(x2))^2#
	k = exp(-dist/(2*sigma^2))#
	return(k)#
}
dim(train)#
n = nrow(train)#
head(train)#
# n = 10 #
K.train = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		dist = gram[i,j]#
		K.train[i,j] = K.train[j,i] = rbfFromStringCount(dist)#
	}#
	print(i)#
}#
K.train#
save(K.train, file="K-train.rda")#
#
n = nrow(test)#
K.test = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		K.test[i,j] = K.test[j,i] = rbf(test$sequence[i], estn$sequence[j])#
	}#
	print(i)#
}#
save(K.test, file="K-test.rda")#
#
K = K.train #
head(K)#
K.star.star = K.test#
#
complete.data = rbind(train, test)#
n = nrow(complete.data)#
K.star = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		K.star[i,j] = K.star[j,i] = rbf(complete.data[i, ], complete.data[j, ])#
	}#
	print(i)#
}#
save(K.star, file="K-star.rda")
K.train[1:10, 1:10]
gram[1:10, 1:10]
K.test[1:10, 1:10]
n = nrow(test)
for(i in 1:n){#
	for(j in i:n){#
		K.test[i,j] = K.test[j,i] = rbf(test$sequence[i], test$sequence[j])#
	}#
	print(i)#
}#
K.test[1:10, 1:10]
save(K.test, file="K-test.rda")
complete.data = rbind(train, test)
n = nrow(complete.data)#
K.star = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		K.star[i,j] = K.star[j,i] = rbf(complete.data[i, ], complete.data[j, ])#
	}#
	print(i)#
}#
save(K.star, file="K-star.rda")
head(complete.data)
complete.data = rbind(train, test)#
head(complete.data)#
n = nrow(complete.data)#
K.star = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		K.star[i,j] = K.star[j,i] = rbf(complete.data$sequence[i, ], complete.data$sequence[j, ])#
	}#
	print(i)#
}#
save(K.star, file="K-star.rda")
complete.data = rbind(train, test)#
head(complete.data)#
n = nrow(complete.data)#
K.star = matrix(NA, nrow=n, ncol=n)#
for(i in 1:n){#
	for(j in i:n){#
		K.star[i,j] = K.star[j,i] = rbf(complete.data$sequence[i], complete.data$sequence[j])#
	}#
	print(i)#
}#
save(K.star, file="K-star.rda")
sigma = 5
sigmaI = sigma^2 * diag(nrow(K))
dim(sigmaI)
dim(K)
K.plus.sigmaI = K + sigmaI
mu.star = t(K.star) %*% solve(K+sigmaI)
mu.star = t(K.star) %*% solve(K+sigmaI)
mu.star = K.star %*% solve(K)
dim(K)
K.plus.sigmaI = K + sigmaI
dim(K.star)
dim(K.star)
FULL = K.star
k.xstar.x = FULL[1001:1100, 1:1000]
dim(k.xstar.x)
k.x.x = FULL[1:1000, 1:1000]
k.x.x.noisy = k.x.x + sigmaI
dim(k.xstar.x)
f.star = k.xstar.x %*% t(k.x.x.noisy)
f.star[1:10, 1:10]
dim(f.star)
f.star = k.xstar.x %*% t(k.x.x.noisy) %*% train$intensity
dim(f.star)
f.star
summary(train$intensity)
k.xstar.x[1:10, 1:10]
k.star = FULL[1:1000, 1001:1100]
mu.star = t(k.star) %*% solve(k.x.x)
dim(mu.star)
mu.star[1:10, 1:10]
dim(mu.star)
mu.star = t(k.star) %*% solve(k.x.x) %*% train$intensity
dim(mu.star)
mu.star[1:10, 1:10]
mu.star[1:10,1]
summary(train$intensity)
ests = mu.star
plot(test$intensity, ests)
plot(test$intensity, ests)
regline = lm(ests ~ mu.star)
plot(test$intensity, ests)
abline(regline)
RMSE(ests, test$intensity)
RMSE = function(a, b){#
	sq.err = (a - b)^2#
	mean.sq.err = mean(sq.err)#
	root.mean.sq.err = sqrt(mean.sq.err)#
	return(root.mean.sq.err)#
}
RMSE(ests, test$intensity)
mu.star = t(k.star) %*% solve(k.x.x.noisy) %*% train$intensity
ests = mu.star
RMSE(ests, test$intensity)
plot(test$intensity, ests)
abline(regline)
plot(test$intensity, ests)#
abline(regline)
regline = lm(ests ~ mu.star)
plot(test$intensity, ests)#
abline(regline)
ests = mu.star
plot(test$intensity, ests)#
abline(regline)
k.star = FULL[1:1000, 1001:1100]#
mu.star = t(k.star) %*% solve(k.x.x.noisy) %*% train$intensity#
dim(mu.star)#
mu.star[1:10,1]#
#
ests = mu.star#
regline = lm(ests ~ mu.star)#
#
RMSE(ests, test$intensity)#
#
plot(test$intensity, ests)#
abline(regline)
regline = lm(ests ~ test$intensity)#
#
RMSE(ests, test$intensity)#
#
plot(test$intensity, ests)#
abline(regline)
mu.star = t(k.star) %*% solve(k.x.x) %*% train$intensity#
dim(mu.star)#
mu.star[1:10,1]#
#
ests = mu.star#
regline = lm(ests ~ test$intensity)#
#
RMSE(ests, test$intensity)#
#
plot(test$intensity, ests)#
abline(regline)
plot(test$intensity, ests,#
	xlab="Observed Intensity",#
	ylab="Predicted Intensity")#
abline(regline)
pdf("scatterplot.pdf")#
plot(test$intensity, ests,#
	xlab="Observed Intensity",#
	ylab="Predicted Intensity")#
abline(regline)#
dev.off()
charsInCombos
